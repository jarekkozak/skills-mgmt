<?php

namespace jk\sys;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-31 at 08:37:49.
 */
class DependencyManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DependencyManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers jk\sys\DependencyManager::register
     */
    public function testRegister()
    {
        \Yii::$container->clear('jk\sys\IProperties');
        DependencyManager::register([
            'jk\sys\IProperties' => [
                'class' => 'jk\sys\PropertiesFile',
                'filename' => dirname(__FILE__).'/PropertiesFileTest.properties'
        ]]);

        $a = \Yii::$container->get('jk\sys\TestDPM');
        $this->assertInstanceOf('jk\sys\PropertiesFile', $a->prop);
    }

    /**
     * @covers jk\sys\DependencyManager::register
     */
    public function testRegister1()
    {
        \Yii::$container->clear('jk\sys\IProperties');
        DependencyManager::register([
            'jk\sys\IProperties' => [
                'class' => 'jk\sys\Properties',
        ]]);
        $a = \Yii::$container->get('jk\sys\TestDPM');
        $this->assertInstanceOf('jk\sys\Properties', $a->prop);
    }

    /**
     * @covers jk\sys\DependencyManager::register
     */
    public function testRegister2()
    {
        \Yii::$container->clear('jk\sys\IProperties');
        DependencyManager::register([
            'jk\sys\IProperties' => function() {
                return new \jk\sys\Properties(['values' => ['prop1' => 'test1']]);
            }]);
            $a = \Yii::$container->get('jk\sys\TestDPM');
            $this->assertInstanceOf('jk\sys\Properties', $a->prop);
            $this->assertEquals('test1', $a->prop->getProperty('prop1'));
        }
    }

    class TestDPM
    {
        public $prop;

        public function __construct(\jk\sys\IProperties $_prop)
        {
            $this->prop = $_prop;
        }
    }